// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// unordered_set_bucket_count_i
std::size_t unordered_set_bucket_count_i(Rcpp::XPtr<std::unordered_set<int> > x);
RcppExport SEXP _cppcontainers_unordered_set_bucket_count_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_bucket_count_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_bucket_count_d
std::size_t unordered_set_bucket_count_d(Rcpp::XPtr<std::unordered_set<double> > x);
RcppExport SEXP _cppcontainers_unordered_set_bucket_count_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_bucket_count_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_bucket_count_s
std::size_t unordered_set_bucket_count_s(Rcpp::XPtr<std::unordered_set<std::string> > x);
RcppExport SEXP _cppcontainers_unordered_set_bucket_count_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_bucket_count_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_bucket_count_b
std::size_t unordered_set_bucket_count_b(Rcpp::XPtr<std::unordered_set<bool> > x);
RcppExport SEXP _cppcontainers_unordered_set_bucket_count_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_bucket_count_b(x));
    return rcpp_result_gen;
END_RCPP
}
// set_clear_i
void set_clear_i(Rcpp::XPtr<std::set<int> > x);
RcppExport SEXP _cppcontainers_set_clear_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<int> > >::type x(xSEXP);
    set_clear_i(x);
    return R_NilValue;
END_RCPP
}
// set_clear_d
void set_clear_d(Rcpp::XPtr<std::set<double> > x);
RcppExport SEXP _cppcontainers_set_clear_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<double> > >::type x(xSEXP);
    set_clear_d(x);
    return R_NilValue;
END_RCPP
}
// set_clear_s
void set_clear_s(Rcpp::XPtr<std::set<std::string> > x);
RcppExport SEXP _cppcontainers_set_clear_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<std::string> > >::type x(xSEXP);
    set_clear_s(x);
    return R_NilValue;
END_RCPP
}
// set_clear_b
void set_clear_b(Rcpp::XPtr<std::set<bool> > x);
RcppExport SEXP _cppcontainers_set_clear_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<bool> > >::type x(xSEXP);
    set_clear_b(x);
    return R_NilValue;
END_RCPP
}
// unordered_set_clear_i
void unordered_set_clear_i(Rcpp::XPtr<std::unordered_set<int> > x);
RcppExport SEXP _cppcontainers_unordered_set_clear_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    unordered_set_clear_i(x);
    return R_NilValue;
END_RCPP
}
// unordered_set_clear_d
void unordered_set_clear_d(Rcpp::XPtr<std::unordered_set<double> > x);
RcppExport SEXP _cppcontainers_unordered_set_clear_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    unordered_set_clear_d(x);
    return R_NilValue;
END_RCPP
}
// unordered_set_clear_s
void unordered_set_clear_s(Rcpp::XPtr<std::unordered_set<std::string> > x);
RcppExport SEXP _cppcontainers_unordered_set_clear_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    unordered_set_clear_s(x);
    return R_NilValue;
END_RCPP
}
// unordered_set_clear_b
void unordered_set_clear_b(Rcpp::XPtr<std::unordered_set<bool> > x);
RcppExport SEXP _cppcontainers_unordered_set_clear_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    unordered_set_clear_b(x);
    return R_NilValue;
END_RCPP
}
// set_contains_i
Rcpp::LogicalVector set_contains_i(Rcpp::XPtr<std::set<int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_set_contains_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(set_contains_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// set_contains_d
Rcpp::LogicalVector set_contains_d(Rcpp::XPtr<std::set<double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_set_contains_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(set_contains_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// set_contains_s
Rcpp::LogicalVector set_contains_s(Rcpp::XPtr<std::set<std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_set_contains_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(set_contains_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// set_contains_b
Rcpp::LogicalVector set_contains_b(Rcpp::XPtr<std::set<bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_set_contains_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(set_contains_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_contains_i
Rcpp::LogicalVector unordered_set_contains_i(Rcpp::XPtr<std::unordered_set<int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_set_contains_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_contains_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_contains_d
Rcpp::LogicalVector unordered_set_contains_d(Rcpp::XPtr<std::unordered_set<double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_set_contains_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_contains_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_contains_s
Rcpp::LogicalVector unordered_set_contains_s(Rcpp::XPtr<std::unordered_set<std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_set_contains_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_contains_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_contains_b
Rcpp::LogicalVector unordered_set_contains_b(Rcpp::XPtr<std::unordered_set<bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_set_contains_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_contains_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// set_count_i
Rcpp::IntegerVector set_count_i(Rcpp::XPtr<std::set<int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_set_count_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(set_count_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// set_count_d
Rcpp::IntegerVector set_count_d(Rcpp::XPtr<std::set<double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_set_count_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(set_count_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// set_count_s
Rcpp::IntegerVector set_count_s(Rcpp::XPtr<std::set<std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_set_count_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(set_count_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// set_count_b
Rcpp::IntegerVector set_count_b(Rcpp::XPtr<std::set<bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_set_count_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(set_count_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_count_i
Rcpp::IntegerVector unordered_set_count_i(Rcpp::XPtr<std::unordered_set<int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_set_count_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_count_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_count_d
Rcpp::IntegerVector unordered_set_count_d(Rcpp::XPtr<std::unordered_set<double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_set_count_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_count_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_count_s
Rcpp::IntegerVector unordered_set_count_s(Rcpp::XPtr<std::unordered_set<std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_set_count_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_count_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_count_b
Rcpp::IntegerVector unordered_set_count_b(Rcpp::XPtr<std::unordered_set<bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_set_count_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_count_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// set_emplace_i
void set_emplace_i(Rcpp::XPtr<std::set<int> > x, int v);
RcppExport SEXP _cppcontainers_set_emplace_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type v(vSEXP);
    set_emplace_i(x, v);
    return R_NilValue;
END_RCPP
}
// set_emplace_d
void set_emplace_d(Rcpp::XPtr<std::set<double> > x, double v);
RcppExport SEXP _cppcontainers_set_emplace_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type v(vSEXP);
    set_emplace_d(x, v);
    return R_NilValue;
END_RCPP
}
// set_emplace_s
void set_emplace_s(Rcpp::XPtr<std::set<std::string> > x, std::string v);
RcppExport SEXP _cppcontainers_set_emplace_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type v(vSEXP);
    set_emplace_s(x, v);
    return R_NilValue;
END_RCPP
}
// set_emplace_b
void set_emplace_b(Rcpp::XPtr<std::set<bool> > x, bool v);
RcppExport SEXP _cppcontainers_set_emplace_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type v(vSEXP);
    set_emplace_b(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_set_emplace_i
void unordered_set_emplace_i(Rcpp::XPtr<std::unordered_set<int> > x, int v);
RcppExport SEXP _cppcontainers_unordered_set_emplace_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type v(vSEXP);
    unordered_set_emplace_i(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_set_emplace_d
void unordered_set_emplace_d(Rcpp::XPtr<std::unordered_set<double> > x, double v);
RcppExport SEXP _cppcontainers_unordered_set_emplace_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type v(vSEXP);
    unordered_set_emplace_d(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_set_emplace_s
void unordered_set_emplace_s(Rcpp::XPtr<std::unordered_set<std::string> > x, std::string v);
RcppExport SEXP _cppcontainers_unordered_set_emplace_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type v(vSEXP);
    unordered_set_emplace_s(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_set_emplace_b
void unordered_set_emplace_b(Rcpp::XPtr<std::unordered_set<bool> > x, bool v);
RcppExport SEXP _cppcontainers_unordered_set_emplace_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type v(vSEXP);
    unordered_set_emplace_b(x, v);
    return R_NilValue;
END_RCPP
}
// set_empty_i
bool set_empty_i(Rcpp::XPtr<std::set<int> > x);
RcppExport SEXP _cppcontainers_set_empty_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(set_empty_i(x));
    return rcpp_result_gen;
END_RCPP
}
// set_empty_d
bool set_empty_d(Rcpp::XPtr<std::set<double> > x);
RcppExport SEXP _cppcontainers_set_empty_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(set_empty_d(x));
    return rcpp_result_gen;
END_RCPP
}
// set_empty_s
bool set_empty_s(Rcpp::XPtr<std::set<std::string> > x);
RcppExport SEXP _cppcontainers_set_empty_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(set_empty_s(x));
    return rcpp_result_gen;
END_RCPP
}
// set_empty_b
bool set_empty_b(Rcpp::XPtr<std::set<bool> > x);
RcppExport SEXP _cppcontainers_set_empty_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(set_empty_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_empty_i
bool unordered_set_empty_i(Rcpp::XPtr<std::unordered_set<int> > x);
RcppExport SEXP _cppcontainers_unordered_set_empty_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_empty_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_empty_d
bool unordered_set_empty_d(Rcpp::XPtr<std::unordered_set<double> > x);
RcppExport SEXP _cppcontainers_unordered_set_empty_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_empty_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_empty_s
bool unordered_set_empty_s(Rcpp::XPtr<std::unordered_set<std::string> > x);
RcppExport SEXP _cppcontainers_unordered_set_empty_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_empty_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_empty_b
bool unordered_set_empty_b(Rcpp::XPtr<std::unordered_set<bool> > x);
RcppExport SEXP _cppcontainers_unordered_set_empty_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_empty_b(x));
    return rcpp_result_gen;
END_RCPP
}
// set_erase_i
void set_erase_i(Rcpp::XPtr<std::set<int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_set_erase_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    set_erase_i(x, v);
    return R_NilValue;
END_RCPP
}
// set_erase_d
void set_erase_d(Rcpp::XPtr<std::set<double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_set_erase_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    set_erase_d(x, v);
    return R_NilValue;
END_RCPP
}
// set_erase_s
void set_erase_s(Rcpp::XPtr<std::set<std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_set_erase_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    set_erase_s(x, v);
    return R_NilValue;
END_RCPP
}
// set_erase_b
void set_erase_b(Rcpp::XPtr<std::set<bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_set_erase_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    set_erase_b(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_set_erase_i
void unordered_set_erase_i(Rcpp::XPtr<std::unordered_set<int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_set_erase_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    unordered_set_erase_i(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_set_erase_d
void unordered_set_erase_d(Rcpp::XPtr<std::unordered_set<double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_set_erase_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    unordered_set_erase_d(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_set_erase_s
void unordered_set_erase_s(Rcpp::XPtr<std::unordered_set<std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_set_erase_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    unordered_set_erase_s(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_set_erase_b
void unordered_set_erase_b(Rcpp::XPtr<std::unordered_set<bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_set_erase_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    unordered_set_erase_b(x, v);
    return R_NilValue;
END_RCPP
}
// set_insert_i
void set_insert_i(Rcpp::XPtr<std::set<int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_set_insert_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    set_insert_i(x, v);
    return R_NilValue;
END_RCPP
}
// set_insert_d
void set_insert_d(Rcpp::XPtr<std::set<double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_set_insert_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    set_insert_d(x, v);
    return R_NilValue;
END_RCPP
}
// set_insert_s
void set_insert_s(Rcpp::XPtr<std::set<std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_set_insert_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    set_insert_s(x, v);
    return R_NilValue;
END_RCPP
}
// set_insert_b
void set_insert_b(Rcpp::XPtr<std::set<bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_set_insert_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    set_insert_b(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_set_insert_i
void unordered_set_insert_i(Rcpp::XPtr<std::unordered_set<int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_set_insert_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    unordered_set_insert_i(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_set_insert_d
void unordered_set_insert_d(Rcpp::XPtr<std::unordered_set<double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_set_insert_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    unordered_set_insert_d(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_set_insert_s
void unordered_set_insert_s(Rcpp::XPtr<std::unordered_set<std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_set_insert_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    unordered_set_insert_s(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_set_insert_b
void unordered_set_insert_b(Rcpp::XPtr<std::unordered_set<bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_set_insert_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    unordered_set_insert_b(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_set_load_factor_i
double unordered_set_load_factor_i(Rcpp::XPtr<std::unordered_set<int> > x);
RcppExport SEXP _cppcontainers_unordered_set_load_factor_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_load_factor_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_load_factor_d
double unordered_set_load_factor_d(Rcpp::XPtr<std::unordered_set<double> > x);
RcppExport SEXP _cppcontainers_unordered_set_load_factor_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_load_factor_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_load_factor_s
double unordered_set_load_factor_s(Rcpp::XPtr<std::unordered_set<std::string> > x);
RcppExport SEXP _cppcontainers_unordered_set_load_factor_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_load_factor_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_load_factor_b
double unordered_set_load_factor_b(Rcpp::XPtr<std::unordered_set<bool> > x);
RcppExport SEXP _cppcontainers_unordered_set_load_factor_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_load_factor_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_max_bucket_count_i
std::size_t unordered_set_max_bucket_count_i(Rcpp::XPtr<std::unordered_set<int> > x);
RcppExport SEXP _cppcontainers_unordered_set_max_bucket_count_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_max_bucket_count_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_max_bucket_count_d
std::size_t unordered_set_max_bucket_count_d(Rcpp::XPtr<std::unordered_set<double> > x);
RcppExport SEXP _cppcontainers_unordered_set_max_bucket_count_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_max_bucket_count_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_max_bucket_count_s
std::size_t unordered_set_max_bucket_count_s(Rcpp::XPtr<std::unordered_set<std::string> > x);
RcppExport SEXP _cppcontainers_unordered_set_max_bucket_count_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_max_bucket_count_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_max_bucket_count_b
std::size_t unordered_set_max_bucket_count_b(Rcpp::XPtr<std::unordered_set<bool> > x);
RcppExport SEXP _cppcontainers_unordered_set_max_bucket_count_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_max_bucket_count_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_max_load_factor_i_get
double unordered_set_max_load_factor_i_get(Rcpp::XPtr<std::unordered_set<int> > x);
RcppExport SEXP _cppcontainers_unordered_set_max_load_factor_i_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_max_load_factor_i_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_max_load_factor_d_get
double unordered_set_max_load_factor_d_get(Rcpp::XPtr<std::unordered_set<double> > x);
RcppExport SEXP _cppcontainers_unordered_set_max_load_factor_d_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_max_load_factor_d_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_max_load_factor_s_get
double unordered_set_max_load_factor_s_get(Rcpp::XPtr<std::unordered_set<std::string> > x);
RcppExport SEXP _cppcontainers_unordered_set_max_load_factor_s_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_max_load_factor_s_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_max_load_factor_b_get
double unordered_set_max_load_factor_b_get(Rcpp::XPtr<std::unordered_set<bool> > x);
RcppExport SEXP _cppcontainers_unordered_set_max_load_factor_b_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_max_load_factor_b_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_max_load_factor_i_set
void unordered_set_max_load_factor_i_set(Rcpp::XPtr<std::unordered_set<int> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_set_max_load_factor_i_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_set_max_load_factor_i_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_set_max_load_factor_d_set
void unordered_set_max_load_factor_d_set(Rcpp::XPtr<std::unordered_set<double> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_set_max_load_factor_d_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_set_max_load_factor_d_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_set_max_load_factor_s_set
void unordered_set_max_load_factor_s_set(Rcpp::XPtr<std::unordered_set<std::string> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_set_max_load_factor_s_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_set_max_load_factor_s_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_set_max_load_factor_b_set
void unordered_set_max_load_factor_b_set(Rcpp::XPtr<std::unordered_set<bool> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_set_max_load_factor_b_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_set_max_load_factor_b_set(x, l);
    return R_NilValue;
END_RCPP
}
// set_max_size_i
std::size_t set_max_size_i(Rcpp::XPtr<std::set<int> > x);
RcppExport SEXP _cppcontainers_set_max_size_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(set_max_size_i(x));
    return rcpp_result_gen;
END_RCPP
}
// set_max_size_d
std::size_t set_max_size_d(Rcpp::XPtr<std::set<double> > x);
RcppExport SEXP _cppcontainers_set_max_size_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(set_max_size_d(x));
    return rcpp_result_gen;
END_RCPP
}
// set_max_size_s
std::size_t set_max_size_s(Rcpp::XPtr<std::set<std::string> > x);
RcppExport SEXP _cppcontainers_set_max_size_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(set_max_size_s(x));
    return rcpp_result_gen;
END_RCPP
}
// set_max_size_b
std::size_t set_max_size_b(Rcpp::XPtr<std::set<bool> > x);
RcppExport SEXP _cppcontainers_set_max_size_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(set_max_size_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_max_size_i
std::size_t unordered_set_max_size_i(Rcpp::XPtr<std::unordered_set<int> > x);
RcppExport SEXP _cppcontainers_unordered_set_max_size_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_max_size_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_max_size_d
std::size_t unordered_set_max_size_d(Rcpp::XPtr<std::unordered_set<double> > x);
RcppExport SEXP _cppcontainers_unordered_set_max_size_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_max_size_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_max_size_s
std::size_t unordered_set_max_size_s(Rcpp::XPtr<std::unordered_set<std::string> > x);
RcppExport SEXP _cppcontainers_unordered_set_max_size_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_max_size_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_max_size_b
std::size_t unordered_set_max_size_b(Rcpp::XPtr<std::unordered_set<bool> > x);
RcppExport SEXP _cppcontainers_unordered_set_max_size_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_max_size_b(x));
    return rcpp_result_gen;
END_RCPP
}
// set_merge_i
void set_merge_i(Rcpp::XPtr<std::set<int> > x, Rcpp::XPtr<std::set<int> > y);
RcppExport SEXP _cppcontainers_set_merge_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<int> > >::type y(ySEXP);
    set_merge_i(x, y);
    return R_NilValue;
END_RCPP
}
// set_merge_d
void set_merge_d(Rcpp::XPtr<std::set<double> > x, Rcpp::XPtr<std::set<double> > y);
RcppExport SEXP _cppcontainers_set_merge_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<double> > >::type y(ySEXP);
    set_merge_d(x, y);
    return R_NilValue;
END_RCPP
}
// set_merge_s
void set_merge_s(Rcpp::XPtr<std::set<std::string> > x, Rcpp::XPtr<std::set<std::string> > y);
RcppExport SEXP _cppcontainers_set_merge_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<std::string> > >::type y(ySEXP);
    set_merge_s(x, y);
    return R_NilValue;
END_RCPP
}
// set_merge_b
void set_merge_b(Rcpp::XPtr<std::set<bool> > x, Rcpp::XPtr<std::set<bool> > y);
RcppExport SEXP _cppcontainers_set_merge_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<bool> > >::type y(ySEXP);
    set_merge_b(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_set_merge_i
void unordered_set_merge_i(Rcpp::XPtr<std::unordered_set<int> > x, Rcpp::XPtr<std::unordered_set<int> > y);
RcppExport SEXP _cppcontainers_unordered_set_merge_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type y(ySEXP);
    unordered_set_merge_i(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_set_merge_d
void unordered_set_merge_d(Rcpp::XPtr<std::unordered_set<double> > x, Rcpp::XPtr<std::unordered_set<double> > y);
RcppExport SEXP _cppcontainers_unordered_set_merge_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type y(ySEXP);
    unordered_set_merge_d(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_set_merge_s
void unordered_set_merge_s(Rcpp::XPtr<std::unordered_set<std::string> > x, Rcpp::XPtr<std::unordered_set<std::string> > y);
RcppExport SEXP _cppcontainers_unordered_set_merge_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type y(ySEXP);
    unordered_set_merge_s(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_set_merge_b
void unordered_set_merge_b(Rcpp::XPtr<std::unordered_set<bool> > x, Rcpp::XPtr<std::unordered_set<bool> > y);
RcppExport SEXP _cppcontainers_unordered_set_merge_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type y(ySEXP);
    unordered_set_merge_b(x, y);
    return R_NilValue;
END_RCPP
}
// set_equal_i
bool set_equal_i(Rcpp::XPtr<std::set<int> > x, Rcpp::XPtr<std::set<int> > y);
RcppExport SEXP _cppcontainers_set_equal_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<int> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(set_equal_i(x, y));
    return rcpp_result_gen;
END_RCPP
}
// set_equal_d
bool set_equal_d(Rcpp::XPtr<std::set<double> > x, Rcpp::XPtr<std::set<double> > y);
RcppExport SEXP _cppcontainers_set_equal_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<double> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(set_equal_d(x, y));
    return rcpp_result_gen;
END_RCPP
}
// set_equal_s
bool set_equal_s(Rcpp::XPtr<std::set<std::string> > x, Rcpp::XPtr<std::set<std::string> > y);
RcppExport SEXP _cppcontainers_set_equal_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<std::string> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(set_equal_s(x, y));
    return rcpp_result_gen;
END_RCPP
}
// set_equal_b
bool set_equal_b(Rcpp::XPtr<std::set<bool> > x, Rcpp::XPtr<std::set<bool> > y);
RcppExport SEXP _cppcontainers_set_equal_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<bool> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(set_equal_b(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_equal_i
bool unordered_set_equal_i(Rcpp::XPtr<std::unordered_set<int> > x, Rcpp::XPtr<std::unordered_set<int> > y);
RcppExport SEXP _cppcontainers_unordered_set_equal_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_equal_i(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_equal_d
bool unordered_set_equal_d(Rcpp::XPtr<std::unordered_set<double> > x, Rcpp::XPtr<std::unordered_set<double> > y);
RcppExport SEXP _cppcontainers_unordered_set_equal_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_equal_d(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_equal_s
bool unordered_set_equal_s(Rcpp::XPtr<std::unordered_set<std::string> > x, Rcpp::XPtr<std::unordered_set<std::string> > y);
RcppExport SEXP _cppcontainers_unordered_set_equal_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_equal_s(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_equal_b
bool unordered_set_equal_b(Rcpp::XPtr<std::unordered_set<bool> > x, Rcpp::XPtr<std::unordered_set<bool> > y);
RcppExport SEXP _cppcontainers_unordered_set_equal_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_equal_b(x, y));
    return rcpp_result_gen;
END_RCPP
}
// set_print_i
void set_print_i(Rcpp::XPtr<std::set<int> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const int from, const bool use_to, const int to);
RcppExport SEXP _cppcontainers_set_print_i(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const int >::type to(toSEXP);
    set_print_i(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// set_print_d
void set_print_d(Rcpp::XPtr<std::set<double> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const double from, const bool use_to, const double to);
RcppExport SEXP _cppcontainers_set_print_d(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const double >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const double >::type to(toSEXP);
    set_print_d(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// set_print_s
void set_print_s(Rcpp::XPtr<std::set<std::string> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const std::string from, const bool use_to, const std::string to);
RcppExport SEXP _cppcontainers_set_print_s(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const std::string >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const std::string >::type to(toSEXP);
    set_print_s(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// set_print_b
void set_print_b(Rcpp::XPtr<std::set<bool> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const bool from, const bool use_to, const bool to);
RcppExport SEXP _cppcontainers_set_print_b(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const bool >::type to(toSEXP);
    set_print_b(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// unordered_set_print_i
void unordered_set_print_i(Rcpp::XPtr<std::unordered_set<int> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_set_print_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_set_print_i(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_set_print_d
void unordered_set_print_d(Rcpp::XPtr<std::unordered_set<double> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_set_print_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_set_print_d(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_set_print_s
void unordered_set_print_s(Rcpp::XPtr<std::unordered_set<std::string> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_set_print_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_set_print_s(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_set_print_b
void unordered_set_print_b(Rcpp::XPtr<std::unordered_set<bool> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_set_print_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_set_print_b(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_set_rehash_i
void unordered_set_rehash_i(Rcpp::XPtr<std::unordered_set<int> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_set_rehash_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_set_rehash_i(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_set_rehash_d
void unordered_set_rehash_d(Rcpp::XPtr<std::unordered_set<double> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_set_rehash_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_set_rehash_d(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_set_rehash_s
void unordered_set_rehash_s(Rcpp::XPtr<std::unordered_set<std::string> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_set_rehash_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_set_rehash_s(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_set_rehash_b
void unordered_set_rehash_b(Rcpp::XPtr<std::unordered_set<bool> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_set_rehash_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_set_rehash_b(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_set_reserve_i
void unordered_set_reserve_i(Rcpp::XPtr<std::unordered_set<int> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_set_reserve_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_set_reserve_i(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_set_reserve_d
void unordered_set_reserve_d(Rcpp::XPtr<std::unordered_set<double> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_set_reserve_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_set_reserve_d(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_set_reserve_s
void unordered_set_reserve_s(Rcpp::XPtr<std::unordered_set<std::string> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_set_reserve_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_set_reserve_s(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_set_reserve_b
void unordered_set_reserve_b(Rcpp::XPtr<std::unordered_set<bool> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_set_reserve_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_set_reserve_b(x, n);
    return R_NilValue;
END_RCPP
}
// set_i
Rcpp::XPtr<std::set<int> > set_i(Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_set_i(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(set_i(v));
    return rcpp_result_gen;
END_RCPP
}
// set_d
Rcpp::XPtr<std::set<double> > set_d(Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_set_d(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(set_d(v));
    return rcpp_result_gen;
END_RCPP
}
// set_s
Rcpp::XPtr<std::set<std::string> > set_s(Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_set_s(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(set_s(v));
    return rcpp_result_gen;
END_RCPP
}
// set_b
Rcpp::XPtr<std::set<bool> > set_b(Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_set_b(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(set_b(v));
    return rcpp_result_gen;
END_RCPP
}
// set_show_i
void set_show_i(Rcpp::XPtr<std::set<int> > p);
RcppExport SEXP _cppcontainers_set_show_i(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<int> > >::type p(pSEXP);
    set_show_i(p);
    return R_NilValue;
END_RCPP
}
// set_show_d
void set_show_d(Rcpp::XPtr<std::set<double> > p);
RcppExport SEXP _cppcontainers_set_show_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<double> > >::type p(pSEXP);
    set_show_d(p);
    return R_NilValue;
END_RCPP
}
// set_show_s
void set_show_s(Rcpp::XPtr<std::set<std::string> > p);
RcppExport SEXP _cppcontainers_set_show_s(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<std::string> > >::type p(pSEXP);
    set_show_s(p);
    return R_NilValue;
END_RCPP
}
// set_show_b
void set_show_b(Rcpp::XPtr<std::set<bool> > p);
RcppExport SEXP _cppcontainers_set_show_b(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<bool> > >::type p(pSEXP);
    set_show_b(p);
    return R_NilValue;
END_RCPP
}
// unordered_set_show_i
void unordered_set_show_i(Rcpp::XPtr<std::unordered_set<int> > p);
RcppExport SEXP _cppcontainers_unordered_set_show_i(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type p(pSEXP);
    unordered_set_show_i(p);
    return R_NilValue;
END_RCPP
}
// unordered_set_show_d
void unordered_set_show_d(Rcpp::XPtr<std::unordered_set<double> > p);
RcppExport SEXP _cppcontainers_unordered_set_show_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type p(pSEXP);
    unordered_set_show_d(p);
    return R_NilValue;
END_RCPP
}
// unordered_set_show_s
void unordered_set_show_s(Rcpp::XPtr<std::unordered_set<std::string> > p);
RcppExport SEXP _cppcontainers_unordered_set_show_s(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type p(pSEXP);
    unordered_set_show_s(p);
    return R_NilValue;
END_RCPP
}
// unordered_set_show_b
void unordered_set_show_b(Rcpp::XPtr<std::unordered_set<bool> > p);
RcppExport SEXP _cppcontainers_unordered_set_show_b(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type p(pSEXP);
    unordered_set_show_b(p);
    return R_NilValue;
END_RCPP
}
// set_size_i
std::size_t set_size_i(Rcpp::XPtr<std::set<int> > x);
RcppExport SEXP _cppcontainers_set_size_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(set_size_i(x));
    return rcpp_result_gen;
END_RCPP
}
// set_size_d
std::size_t set_size_d(Rcpp::XPtr<std::set<double> > x);
RcppExport SEXP _cppcontainers_set_size_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(set_size_d(x));
    return rcpp_result_gen;
END_RCPP
}
// set_size_s
std::size_t set_size_s(Rcpp::XPtr<std::set<std::string> > x);
RcppExport SEXP _cppcontainers_set_size_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(set_size_s(x));
    return rcpp_result_gen;
END_RCPP
}
// set_size_b
std::size_t set_size_b(Rcpp::XPtr<std::set<bool> > x);
RcppExport SEXP _cppcontainers_set_size_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(set_size_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_size_i
std::size_t unordered_set_size_i(Rcpp::XPtr<std::unordered_set<int> > x);
RcppExport SEXP _cppcontainers_unordered_set_size_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_size_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_size_d
std::size_t unordered_set_size_d(Rcpp::XPtr<std::unordered_set<double> > x);
RcppExport SEXP _cppcontainers_unordered_set_size_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_size_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_size_s
std::size_t unordered_set_size_s(Rcpp::XPtr<std::unordered_set<std::string> > x);
RcppExport SEXP _cppcontainers_unordered_set_size_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_size_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_size_b
std::size_t unordered_set_size_b(Rcpp::XPtr<std::unordered_set<bool> > x);
RcppExport SEXP _cppcontainers_unordered_set_size_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_size_b(x));
    return rcpp_result_gen;
END_RCPP
}
// set_to_r_i
Rcpp::IntegerVector set_to_r_i(Rcpp::XPtr<std::set<int> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const int from, const bool use_to, const int to);
RcppExport SEXP _cppcontainers_set_to_r_i(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const int >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(set_to_r_i(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// set_to_r_d
Rcpp::NumericVector set_to_r_d(Rcpp::XPtr<std::set<double> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const double from, const bool use_to, const double to);
RcppExport SEXP _cppcontainers_set_to_r_d(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const double >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const double >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(set_to_r_d(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// set_to_r_s
Rcpp::CharacterVector set_to_r_s(Rcpp::XPtr<std::set<std::string> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const std::string from, const bool use_to, const std::string to);
RcppExport SEXP _cppcontainers_set_to_r_s(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const std::string >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const std::string >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(set_to_r_s(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// set_to_r_b
Rcpp::LogicalVector set_to_r_b(Rcpp::XPtr<std::set<bool> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const bool from, const bool use_to, const bool to);
RcppExport SEXP _cppcontainers_set_to_r_b(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const bool >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(set_to_r_b(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_to_r_i
Rcpp::IntegerVector unordered_set_to_r_i(Rcpp::XPtr<std::unordered_set<int> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_set_to_r_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_to_r_i(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_to_r_d
Rcpp::NumericVector unordered_set_to_r_d(Rcpp::XPtr<std::unordered_set<double> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_set_to_r_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_to_r_d(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_to_r_s
Rcpp::CharacterVector unordered_set_to_r_s(Rcpp::XPtr<std::unordered_set<std::string> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_set_to_r_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_to_r_s(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_to_r_b
Rcpp::LogicalVector unordered_set_to_r_b(Rcpp::XPtr<std::unordered_set<bool> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_set_to_r_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_to_r_b(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_i
Rcpp::XPtr<std::unordered_set<int> > unordered_set_i(Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_set_i(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_i(v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_d
Rcpp::XPtr<std::unordered_set<double> > unordered_set_d(Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_set_d(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_d(v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_s
Rcpp::XPtr<std::unordered_set<std::string> > unordered_set_s(Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_set_s(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_s(v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_b
Rcpp::XPtr<std::unordered_set<bool> > unordered_set_b(Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_set_b(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_b(v));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cppcontainers_unordered_set_bucket_count_i", (DL_FUNC) &_cppcontainers_unordered_set_bucket_count_i, 1},
    {"_cppcontainers_unordered_set_bucket_count_d", (DL_FUNC) &_cppcontainers_unordered_set_bucket_count_d, 1},
    {"_cppcontainers_unordered_set_bucket_count_s", (DL_FUNC) &_cppcontainers_unordered_set_bucket_count_s, 1},
    {"_cppcontainers_unordered_set_bucket_count_b", (DL_FUNC) &_cppcontainers_unordered_set_bucket_count_b, 1},
    {"_cppcontainers_set_clear_i", (DL_FUNC) &_cppcontainers_set_clear_i, 1},
    {"_cppcontainers_set_clear_d", (DL_FUNC) &_cppcontainers_set_clear_d, 1},
    {"_cppcontainers_set_clear_s", (DL_FUNC) &_cppcontainers_set_clear_s, 1},
    {"_cppcontainers_set_clear_b", (DL_FUNC) &_cppcontainers_set_clear_b, 1},
    {"_cppcontainers_unordered_set_clear_i", (DL_FUNC) &_cppcontainers_unordered_set_clear_i, 1},
    {"_cppcontainers_unordered_set_clear_d", (DL_FUNC) &_cppcontainers_unordered_set_clear_d, 1},
    {"_cppcontainers_unordered_set_clear_s", (DL_FUNC) &_cppcontainers_unordered_set_clear_s, 1},
    {"_cppcontainers_unordered_set_clear_b", (DL_FUNC) &_cppcontainers_unordered_set_clear_b, 1},
    {"_cppcontainers_set_contains_i", (DL_FUNC) &_cppcontainers_set_contains_i, 2},
    {"_cppcontainers_set_contains_d", (DL_FUNC) &_cppcontainers_set_contains_d, 2},
    {"_cppcontainers_set_contains_s", (DL_FUNC) &_cppcontainers_set_contains_s, 2},
    {"_cppcontainers_set_contains_b", (DL_FUNC) &_cppcontainers_set_contains_b, 2},
    {"_cppcontainers_unordered_set_contains_i", (DL_FUNC) &_cppcontainers_unordered_set_contains_i, 2},
    {"_cppcontainers_unordered_set_contains_d", (DL_FUNC) &_cppcontainers_unordered_set_contains_d, 2},
    {"_cppcontainers_unordered_set_contains_s", (DL_FUNC) &_cppcontainers_unordered_set_contains_s, 2},
    {"_cppcontainers_unordered_set_contains_b", (DL_FUNC) &_cppcontainers_unordered_set_contains_b, 2},
    {"_cppcontainers_set_count_i", (DL_FUNC) &_cppcontainers_set_count_i, 2},
    {"_cppcontainers_set_count_d", (DL_FUNC) &_cppcontainers_set_count_d, 2},
    {"_cppcontainers_set_count_s", (DL_FUNC) &_cppcontainers_set_count_s, 2},
    {"_cppcontainers_set_count_b", (DL_FUNC) &_cppcontainers_set_count_b, 2},
    {"_cppcontainers_unordered_set_count_i", (DL_FUNC) &_cppcontainers_unordered_set_count_i, 2},
    {"_cppcontainers_unordered_set_count_d", (DL_FUNC) &_cppcontainers_unordered_set_count_d, 2},
    {"_cppcontainers_unordered_set_count_s", (DL_FUNC) &_cppcontainers_unordered_set_count_s, 2},
    {"_cppcontainers_unordered_set_count_b", (DL_FUNC) &_cppcontainers_unordered_set_count_b, 2},
    {"_cppcontainers_set_emplace_i", (DL_FUNC) &_cppcontainers_set_emplace_i, 2},
    {"_cppcontainers_set_emplace_d", (DL_FUNC) &_cppcontainers_set_emplace_d, 2},
    {"_cppcontainers_set_emplace_s", (DL_FUNC) &_cppcontainers_set_emplace_s, 2},
    {"_cppcontainers_set_emplace_b", (DL_FUNC) &_cppcontainers_set_emplace_b, 2},
    {"_cppcontainers_unordered_set_emplace_i", (DL_FUNC) &_cppcontainers_unordered_set_emplace_i, 2},
    {"_cppcontainers_unordered_set_emplace_d", (DL_FUNC) &_cppcontainers_unordered_set_emplace_d, 2},
    {"_cppcontainers_unordered_set_emplace_s", (DL_FUNC) &_cppcontainers_unordered_set_emplace_s, 2},
    {"_cppcontainers_unordered_set_emplace_b", (DL_FUNC) &_cppcontainers_unordered_set_emplace_b, 2},
    {"_cppcontainers_set_empty_i", (DL_FUNC) &_cppcontainers_set_empty_i, 1},
    {"_cppcontainers_set_empty_d", (DL_FUNC) &_cppcontainers_set_empty_d, 1},
    {"_cppcontainers_set_empty_s", (DL_FUNC) &_cppcontainers_set_empty_s, 1},
    {"_cppcontainers_set_empty_b", (DL_FUNC) &_cppcontainers_set_empty_b, 1},
    {"_cppcontainers_unordered_set_empty_i", (DL_FUNC) &_cppcontainers_unordered_set_empty_i, 1},
    {"_cppcontainers_unordered_set_empty_d", (DL_FUNC) &_cppcontainers_unordered_set_empty_d, 1},
    {"_cppcontainers_unordered_set_empty_s", (DL_FUNC) &_cppcontainers_unordered_set_empty_s, 1},
    {"_cppcontainers_unordered_set_empty_b", (DL_FUNC) &_cppcontainers_unordered_set_empty_b, 1},
    {"_cppcontainers_set_erase_i", (DL_FUNC) &_cppcontainers_set_erase_i, 2},
    {"_cppcontainers_set_erase_d", (DL_FUNC) &_cppcontainers_set_erase_d, 2},
    {"_cppcontainers_set_erase_s", (DL_FUNC) &_cppcontainers_set_erase_s, 2},
    {"_cppcontainers_set_erase_b", (DL_FUNC) &_cppcontainers_set_erase_b, 2},
    {"_cppcontainers_unordered_set_erase_i", (DL_FUNC) &_cppcontainers_unordered_set_erase_i, 2},
    {"_cppcontainers_unordered_set_erase_d", (DL_FUNC) &_cppcontainers_unordered_set_erase_d, 2},
    {"_cppcontainers_unordered_set_erase_s", (DL_FUNC) &_cppcontainers_unordered_set_erase_s, 2},
    {"_cppcontainers_unordered_set_erase_b", (DL_FUNC) &_cppcontainers_unordered_set_erase_b, 2},
    {"_cppcontainers_set_insert_i", (DL_FUNC) &_cppcontainers_set_insert_i, 2},
    {"_cppcontainers_set_insert_d", (DL_FUNC) &_cppcontainers_set_insert_d, 2},
    {"_cppcontainers_set_insert_s", (DL_FUNC) &_cppcontainers_set_insert_s, 2},
    {"_cppcontainers_set_insert_b", (DL_FUNC) &_cppcontainers_set_insert_b, 2},
    {"_cppcontainers_unordered_set_insert_i", (DL_FUNC) &_cppcontainers_unordered_set_insert_i, 2},
    {"_cppcontainers_unordered_set_insert_d", (DL_FUNC) &_cppcontainers_unordered_set_insert_d, 2},
    {"_cppcontainers_unordered_set_insert_s", (DL_FUNC) &_cppcontainers_unordered_set_insert_s, 2},
    {"_cppcontainers_unordered_set_insert_b", (DL_FUNC) &_cppcontainers_unordered_set_insert_b, 2},
    {"_cppcontainers_unordered_set_load_factor_i", (DL_FUNC) &_cppcontainers_unordered_set_load_factor_i, 1},
    {"_cppcontainers_unordered_set_load_factor_d", (DL_FUNC) &_cppcontainers_unordered_set_load_factor_d, 1},
    {"_cppcontainers_unordered_set_load_factor_s", (DL_FUNC) &_cppcontainers_unordered_set_load_factor_s, 1},
    {"_cppcontainers_unordered_set_load_factor_b", (DL_FUNC) &_cppcontainers_unordered_set_load_factor_b, 1},
    {"_cppcontainers_unordered_set_max_bucket_count_i", (DL_FUNC) &_cppcontainers_unordered_set_max_bucket_count_i, 1},
    {"_cppcontainers_unordered_set_max_bucket_count_d", (DL_FUNC) &_cppcontainers_unordered_set_max_bucket_count_d, 1},
    {"_cppcontainers_unordered_set_max_bucket_count_s", (DL_FUNC) &_cppcontainers_unordered_set_max_bucket_count_s, 1},
    {"_cppcontainers_unordered_set_max_bucket_count_b", (DL_FUNC) &_cppcontainers_unordered_set_max_bucket_count_b, 1},
    {"_cppcontainers_unordered_set_max_load_factor_i_get", (DL_FUNC) &_cppcontainers_unordered_set_max_load_factor_i_get, 1},
    {"_cppcontainers_unordered_set_max_load_factor_d_get", (DL_FUNC) &_cppcontainers_unordered_set_max_load_factor_d_get, 1},
    {"_cppcontainers_unordered_set_max_load_factor_s_get", (DL_FUNC) &_cppcontainers_unordered_set_max_load_factor_s_get, 1},
    {"_cppcontainers_unordered_set_max_load_factor_b_get", (DL_FUNC) &_cppcontainers_unordered_set_max_load_factor_b_get, 1},
    {"_cppcontainers_unordered_set_max_load_factor_i_set", (DL_FUNC) &_cppcontainers_unordered_set_max_load_factor_i_set, 2},
    {"_cppcontainers_unordered_set_max_load_factor_d_set", (DL_FUNC) &_cppcontainers_unordered_set_max_load_factor_d_set, 2},
    {"_cppcontainers_unordered_set_max_load_factor_s_set", (DL_FUNC) &_cppcontainers_unordered_set_max_load_factor_s_set, 2},
    {"_cppcontainers_unordered_set_max_load_factor_b_set", (DL_FUNC) &_cppcontainers_unordered_set_max_load_factor_b_set, 2},
    {"_cppcontainers_set_max_size_i", (DL_FUNC) &_cppcontainers_set_max_size_i, 1},
    {"_cppcontainers_set_max_size_d", (DL_FUNC) &_cppcontainers_set_max_size_d, 1},
    {"_cppcontainers_set_max_size_s", (DL_FUNC) &_cppcontainers_set_max_size_s, 1},
    {"_cppcontainers_set_max_size_b", (DL_FUNC) &_cppcontainers_set_max_size_b, 1},
    {"_cppcontainers_unordered_set_max_size_i", (DL_FUNC) &_cppcontainers_unordered_set_max_size_i, 1},
    {"_cppcontainers_unordered_set_max_size_d", (DL_FUNC) &_cppcontainers_unordered_set_max_size_d, 1},
    {"_cppcontainers_unordered_set_max_size_s", (DL_FUNC) &_cppcontainers_unordered_set_max_size_s, 1},
    {"_cppcontainers_unordered_set_max_size_b", (DL_FUNC) &_cppcontainers_unordered_set_max_size_b, 1},
    {"_cppcontainers_set_merge_i", (DL_FUNC) &_cppcontainers_set_merge_i, 2},
    {"_cppcontainers_set_merge_d", (DL_FUNC) &_cppcontainers_set_merge_d, 2},
    {"_cppcontainers_set_merge_s", (DL_FUNC) &_cppcontainers_set_merge_s, 2},
    {"_cppcontainers_set_merge_b", (DL_FUNC) &_cppcontainers_set_merge_b, 2},
    {"_cppcontainers_unordered_set_merge_i", (DL_FUNC) &_cppcontainers_unordered_set_merge_i, 2},
    {"_cppcontainers_unordered_set_merge_d", (DL_FUNC) &_cppcontainers_unordered_set_merge_d, 2},
    {"_cppcontainers_unordered_set_merge_s", (DL_FUNC) &_cppcontainers_unordered_set_merge_s, 2},
    {"_cppcontainers_unordered_set_merge_b", (DL_FUNC) &_cppcontainers_unordered_set_merge_b, 2},
    {"_cppcontainers_set_equal_i", (DL_FUNC) &_cppcontainers_set_equal_i, 2},
    {"_cppcontainers_set_equal_d", (DL_FUNC) &_cppcontainers_set_equal_d, 2},
    {"_cppcontainers_set_equal_s", (DL_FUNC) &_cppcontainers_set_equal_s, 2},
    {"_cppcontainers_set_equal_b", (DL_FUNC) &_cppcontainers_set_equal_b, 2},
    {"_cppcontainers_unordered_set_equal_i", (DL_FUNC) &_cppcontainers_unordered_set_equal_i, 2},
    {"_cppcontainers_unordered_set_equal_d", (DL_FUNC) &_cppcontainers_unordered_set_equal_d, 2},
    {"_cppcontainers_unordered_set_equal_s", (DL_FUNC) &_cppcontainers_unordered_set_equal_s, 2},
    {"_cppcontainers_unordered_set_equal_b", (DL_FUNC) &_cppcontainers_unordered_set_equal_b, 2},
    {"_cppcontainers_set_print_i", (DL_FUNC) &_cppcontainers_set_print_i, 8},
    {"_cppcontainers_set_print_d", (DL_FUNC) &_cppcontainers_set_print_d, 8},
    {"_cppcontainers_set_print_s", (DL_FUNC) &_cppcontainers_set_print_s, 8},
    {"_cppcontainers_set_print_b", (DL_FUNC) &_cppcontainers_set_print_b, 8},
    {"_cppcontainers_unordered_set_print_i", (DL_FUNC) &_cppcontainers_unordered_set_print_i, 2},
    {"_cppcontainers_unordered_set_print_d", (DL_FUNC) &_cppcontainers_unordered_set_print_d, 2},
    {"_cppcontainers_unordered_set_print_s", (DL_FUNC) &_cppcontainers_unordered_set_print_s, 2},
    {"_cppcontainers_unordered_set_print_b", (DL_FUNC) &_cppcontainers_unordered_set_print_b, 2},
    {"_cppcontainers_unordered_set_rehash_i", (DL_FUNC) &_cppcontainers_unordered_set_rehash_i, 2},
    {"_cppcontainers_unordered_set_rehash_d", (DL_FUNC) &_cppcontainers_unordered_set_rehash_d, 2},
    {"_cppcontainers_unordered_set_rehash_s", (DL_FUNC) &_cppcontainers_unordered_set_rehash_s, 2},
    {"_cppcontainers_unordered_set_rehash_b", (DL_FUNC) &_cppcontainers_unordered_set_rehash_b, 2},
    {"_cppcontainers_unordered_set_reserve_i", (DL_FUNC) &_cppcontainers_unordered_set_reserve_i, 2},
    {"_cppcontainers_unordered_set_reserve_d", (DL_FUNC) &_cppcontainers_unordered_set_reserve_d, 2},
    {"_cppcontainers_unordered_set_reserve_s", (DL_FUNC) &_cppcontainers_unordered_set_reserve_s, 2},
    {"_cppcontainers_unordered_set_reserve_b", (DL_FUNC) &_cppcontainers_unordered_set_reserve_b, 2},
    {"_cppcontainers_set_i", (DL_FUNC) &_cppcontainers_set_i, 1},
    {"_cppcontainers_set_d", (DL_FUNC) &_cppcontainers_set_d, 1},
    {"_cppcontainers_set_s", (DL_FUNC) &_cppcontainers_set_s, 1},
    {"_cppcontainers_set_b", (DL_FUNC) &_cppcontainers_set_b, 1},
    {"_cppcontainers_set_show_i", (DL_FUNC) &_cppcontainers_set_show_i, 1},
    {"_cppcontainers_set_show_d", (DL_FUNC) &_cppcontainers_set_show_d, 1},
    {"_cppcontainers_set_show_s", (DL_FUNC) &_cppcontainers_set_show_s, 1},
    {"_cppcontainers_set_show_b", (DL_FUNC) &_cppcontainers_set_show_b, 1},
    {"_cppcontainers_unordered_set_show_i", (DL_FUNC) &_cppcontainers_unordered_set_show_i, 1},
    {"_cppcontainers_unordered_set_show_d", (DL_FUNC) &_cppcontainers_unordered_set_show_d, 1},
    {"_cppcontainers_unordered_set_show_s", (DL_FUNC) &_cppcontainers_unordered_set_show_s, 1},
    {"_cppcontainers_unordered_set_show_b", (DL_FUNC) &_cppcontainers_unordered_set_show_b, 1},
    {"_cppcontainers_set_size_i", (DL_FUNC) &_cppcontainers_set_size_i, 1},
    {"_cppcontainers_set_size_d", (DL_FUNC) &_cppcontainers_set_size_d, 1},
    {"_cppcontainers_set_size_s", (DL_FUNC) &_cppcontainers_set_size_s, 1},
    {"_cppcontainers_set_size_b", (DL_FUNC) &_cppcontainers_set_size_b, 1},
    {"_cppcontainers_unordered_set_size_i", (DL_FUNC) &_cppcontainers_unordered_set_size_i, 1},
    {"_cppcontainers_unordered_set_size_d", (DL_FUNC) &_cppcontainers_unordered_set_size_d, 1},
    {"_cppcontainers_unordered_set_size_s", (DL_FUNC) &_cppcontainers_unordered_set_size_s, 1},
    {"_cppcontainers_unordered_set_size_b", (DL_FUNC) &_cppcontainers_unordered_set_size_b, 1},
    {"_cppcontainers_set_to_r_i", (DL_FUNC) &_cppcontainers_set_to_r_i, 8},
    {"_cppcontainers_set_to_r_d", (DL_FUNC) &_cppcontainers_set_to_r_d, 8},
    {"_cppcontainers_set_to_r_s", (DL_FUNC) &_cppcontainers_set_to_r_s, 8},
    {"_cppcontainers_set_to_r_b", (DL_FUNC) &_cppcontainers_set_to_r_b, 8},
    {"_cppcontainers_unordered_set_to_r_i", (DL_FUNC) &_cppcontainers_unordered_set_to_r_i, 2},
    {"_cppcontainers_unordered_set_to_r_d", (DL_FUNC) &_cppcontainers_unordered_set_to_r_d, 2},
    {"_cppcontainers_unordered_set_to_r_s", (DL_FUNC) &_cppcontainers_unordered_set_to_r_s, 2},
    {"_cppcontainers_unordered_set_to_r_b", (DL_FUNC) &_cppcontainers_unordered_set_to_r_b, 2},
    {"_cppcontainers_unordered_set_i", (DL_FUNC) &_cppcontainers_unordered_set_i, 1},
    {"_cppcontainers_unordered_set_d", (DL_FUNC) &_cppcontainers_unordered_set_d, 1},
    {"_cppcontainers_unordered_set_s", (DL_FUNC) &_cppcontainers_unordered_set_s, 1},
    {"_cppcontainers_unordered_set_b", (DL_FUNC) &_cppcontainers_unordered_set_b, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_cppcontainers(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
